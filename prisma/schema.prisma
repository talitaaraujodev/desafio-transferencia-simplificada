generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                          Int          @id @default(autoincrement())
  name                        String
  cpf_cnpj                    String       @unique @db.Char(14)
  email                       String       @unique
  password                    String
  transfers_user_origem       Transfers[]  @relation("transfers_user_origem")
  transfers_user_destinatario Transfers[]  @relation("transfers_user_destinatario")
  UsersRoles                  UsersRoles[]

  @@map("users")
}

model Permissions {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String
  PermissionsRoles PermissionsRoles[]

  @@map("permissions")
}

model Roles {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String
  PermissionsRoles PermissionsRoles[]
  UsersRoles       UsersRoles[]

  @@map("roles")
}

model PermissionsRoles {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  Roles         Roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  Permissions   Permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@map("permissions_roles")
}

model UsersRoles {
  id       Int   @id @default(autoincrement())
  user_id  Int
  role_id  Int
  Usuarios Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Roles    Roles @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@map("users_roles")
}

model WalletType {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  Wallets     Wallets[]

  @@map("wallet_type")
}

model Wallets {
  id                            Int         @id @default(autoincrement())
  balance                        Float       @default(0.00)
  user_id                       Int
  tipo_id                       Int
  WalletType                    WalletType  @relation(fields: [tipo_id], references: [id])
  transfers_wallet_origem       Transfers[] @relation("transfers_wallet_origem")
  transfers_wallet_destinatario Transfers[] @relation("transfers_wallet_destinatario")

  @@map("wallets")
}

model Transfers {
  id                            Int                  @id @default(autoincrement())
  value                         Float
  status                        TransferenciasStatus @default(Pendente)
  wallet_origem                 Int
  wallet_destinatario           Int
  user_origem                   Int
  user_destinatario             Int
  transfers_wallet_origem       Wallets              @relation("transfers_wallet_origem", fields: [wallet_origem], references: [id])
  transfers_wallet_destinatario Wallets              @relation("transfers_wallet_destinatario", fields: [wallet_destinatario], references: [id], onDelete: Cascade)
  transfers_user_origem         Users                @relation("transfers_user_origem", fields: [user_origem], references: [id], onDelete: Cascade)
  transfers_user_destinatario   Users                @relation("transfers_user_destinatario", fields: [user_destinatario], references: [id], onDelete: Cascade)

  @@map("transfers")
}

enum TransferenciasStatus {
  Pendente
  Finalizado
}
